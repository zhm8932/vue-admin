前端面试

alert(1&&2),alert(1||0)

一、什么是闭包？闭包有什么好处，使用闭包要注意什么？
二、常见字符串方法，数组方法，数学方法
//字符串方法
    str.charAt(),str.toLowerCase(),str.toUpperCase(),str.indexOf(),str.laseIndexOf(),str.substring(),str.split()
//数组方法
    ,arr.push(),arr.unshift(),arr.pop(),arr.shift()
    ,arr.join(),arr.splice(), arr.reverse(),arr.concat(), arr.sort()
//数学方法
    Math.random(),Math.pow(),Math.sqrt(),Math.abs()
    ,Math.floor(),Math.ceil(),Math.round(),Math.max(),Math.min()
会改变原来数组的有：
pop()---删除数组的最后一个元素并返回删除的元素。
push()---向数组的末尾添加一个或更多元素，并返回新的长度。
shift()---删除并返回数组的第一个元素。
unshift()---向数组的开头添加一个或更多元素，并返回新的长度。
reverse()---反转数组的元素顺序。
sort()---对数组的元素进行排序。
splice()---用于插入、删除或替换数组的元素。


不会改变原来数组的有：
concat()---连接两个或更多的数组，并返回结果。
every()---检测数组元素的每个元素是否都符合条件。
some()---检测数组元素中是否有元素符合指定条件。
filter()---检测数组元素，并返回符合条件所有元素的数组。
indexOf()---搜索数组中的元素，并返回它所在的位置。
join()---把数组的所有元素放入一个字符串。
toString()---把数组转换为字符串，并返回结果。
lastIndexOf()---返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。
map()---通过指定函数处理数组的每个元素，并返回处理后的数组。
slice()---选取数组的的一部分，并返回一个新数组。
valueOf()---返回数组对象的原始值。
	
	
三、如何判断浏览器类型  navigator.userAgent

四、get和post的区别

五、cookie，localStorage和sessionStorage有什么区别？
共同点：都是保存在浏览器端，且同源的
区别：
1.是否浏览器和服务器间来回传递
2、路径（path）概念
3、存储大小限制 4k, 5M
4、数据有效期
5、作用域： sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。

六、列举for/for in 二种循环方法的区别和优缺点
for 速度快，不能遍历对象的属性
for in 慢 ， 可以遍历对象的属性
for of  遍历数组

七、描述typeof与instanceof，constructor的区别是什么？

typeof
    检测基本数据类型 返回一个表达式的数据类型的字符串
Instanceof
    检测复合类型 instanceof运算符用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置
	该值指示一个对象是否为特定类的一个实例 其本质是判断  class.prototype 是否存在于object对象的原型链上
constructor
    检测构造函数
	
判断数据类型的四种方法及typeof、instanceof、constructor、toString
toString 是 Object 原型对象上的方法，使用 call 来调用该方法会返回调用者的类型字符串，格式为 [object,xxx]
	
八、数组和字符串如何进行相互转换？  join()  split()
九、call和apply的作用什么，区别是什么？
		相同点:两个方法产生的作用是完全一样的
		不同点:方法传递的参数不同
		
十、什么是事件委托？
利用事件冒泡原理，将子级的事件加给父级，使用事件委托，可节省性能，也可以给js动态创建的元素加事件

十一、	解释一下jsonp的原理，为什么不是真正的ajax？
动态创建script标签，回调函数
Ajax是页面无刷新请求数据操作	

十二、new操作符具体干了什么呢
	1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。
2、属性和方法被加入到 this 引用的对象中。
3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。
	
十三、ajax原理是什么？

(1)创建对象
var xhr = new XMLHttpRequest();
(2)打开请求
xhr.open('GET', 'example.txt', true);

(3)发送请求
xhr.send(); 发送请求到服务器

(4)接收响应
xhr.onreadystatechange =function(){}

十四 程序中怎样捕获异常？

try{}catch(e){}

十五、怎样获取浏览器的滚动距离
scrollTop=document.documentElement.scrollTop||document.body.scrollTop

十六、
Jquery中$(document).ready()和window.onload的区别
1、执行时间、2、编写个数、3、简写方法

十七，列举css清除浮动的方法
1,为浮动元素父级加overflow：hidden
2，在浮动元素下面加<br style="clear:both"/>
3,为浮动元素父级加height
4，为浮动元素父级加.clearfix
.clearfix:after{display:block; content:'';clear：both;}
.clearfix{zoom:1;}

十八、你知道的css选择器有哪些？

id选择器（ # myid）
类选择器（.myclassname）
标签选择器（div, h1, p）
相邻选择器（h1 + p）
子选择器（ul > li）
后代选择器（li a）
通配符选择器（ * ）
属性选择器（a[rel = “external”]）
伪类选择器（a: hover, li: nth – child）

十九、介绍一下	css盒子模型
有两种， IE 盒子模型、标准 W3C 盒子模型；
IE的content部分包含了 border 和 pading;
w3c盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border).
影响盒子模型大小的包括content+padding+border

二十、谈谈This对象的理解。
this是js的一个关键字，随着函数使用场合不同，this的值会发生变化。
但是有一个总原则，那就是this指的是调用函数的那个对象。
this一般情况下：是全局对象Global。 作为方法调用，那么this就是指这个对象

一针见血式总结:
普通函数中的this:
1. this总是代表它的直接调用者(js的this是执行上下文), 例如 obj.func ,那么func中的this就是obj
2.在默认情况(非严格模式下,未使用 ‘use strict’),没找到直接调用者,则this指的是 window (约定俗成)
3.在严格模式下,没有直接调用者的函数中的this是 undefined
4.使用call,apply,bind(ES5新增)绑定的,this指的是 绑定的对象
箭头函数中的this：
箭头函数没有自己的this, 它的this是继承而来; 默认指向在定义它时所处的对象(宿主对象),而不是执行时的对象, 
定义它的时候,可能环境是window; 箭头函数可以方便地让我们在 setTimeout ,setInterval中方便的使用this

箭头函数：
不绑定this，this为作用域，有上下文决定
普通函数的this指向调用它的那个对象
call,apply,bind不会改变this的指向

二十一、css3中transform可以设置哪些样式？
transform:
rotate(9deg) 
scale(0.85,0.90) 
translate(0px,-30px) 
skew(-9deg,0deg);//旋转,缩放,定位,倾斜

二十二、简述对‘use strict’怎么理解？

好处：
1，定义变量，必须加var
2，if，for等语句里不能加函数
3，干掉了with

作用域
1，作用在script标签内部
2，可以作用在函数内部
3，放在整个js文件开头

二十三、请你谈谈Cookie的弊端
使用要点：
1、控制保存在cook通过ie中的session对象的大小
2、通过加密和安全传输技术（SSL）,减少cookie被劫持的可能性
3、只在cookie存放不敏感数据，即使被盗也不会有重大损失
4、控制cookie的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的cookie


优点：分担了服务器存储的负担
缺点：
1、数量和长度限制、每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉
2、安全性问题，如果cookie被人拦截了


二十四：如何对网站的文件和资源进行优化

1、文件合并
2、文件最小化、文件压缩
3、使用 CDN 托管：其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度/4、
4、缓存的使用
	Ajax调用都采用缓存调用方式，一般采用附加特征参数方式实现
	在服务器端配置control-cache  last-modify-date
	在服务器配置Entity-Tag     if-none-
5、用更少的时间下载更多的文件，提高网站加载速度，提高用户体验，可以使用以下方法	
1.css sprites----将小图片合并为一张大图片,
2、将资源放在多个域名下
3、	图片延迟加载

前端开发的优化问题

前端开发的优化问题：
   　 (1) 减少http请求次数：css spirit,data uri
       (2) JS，CSS源码压缩
       (3) 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数
       (4) 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能
       (5) 用setTimeout来避免页面失去响应
       (6) 用hash-table来优化查找
       (7) 当需要设置的样式很多时设置className而不是直接操作style 
       (8) 少用全局变量
       (9) 缓存DOM节点查找的结果
       (10) 避免使用CSS Expression
       (11) 图片预载
       (12) 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢

如何控制网页在网络传输过程中的数据量
       （1）启用GZIP压缩
       （2）保持良好的编程习惯，避免重复的CSS，JavaScript代码，多余的HTML标签和属性
	   
	   
二十五、文件加载顺序
浏览器加载页面上引用的CSS、JS文件、图片时，是按顺序从上到下加载的，
每个浏览器可以同时下载文件的个数不同，
因此经常有网站将静态文件放在不同的域名下，这样可以加快网站打开的速度。

二十六、为什么利用多个域名来请求网络资源会更有效
1、CDN缓存更方便
2、突破浏览器并发限制，浏览器一次能发送的http请求是有限的
3.节约cookie带宽
4.减少主域名的连接数，优化页面响应速度

二十八、描述css reset的作用和用途

二十九、请解释一下什么是“语义化的 HTML”

三十、display:none和visible:hidden区别 
三十一、请解释一下 inline 和 inline-block，block 的区别？
display:block

　　1）block元素会独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度自动填满其父元素宽度。

　　2）block元素可以设置width,height属性。块级元素即使设置了宽度,仍然是独占一行。

　　3）block元素可以设置margin和padding属性。

display:inline

　　1）inline元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随元素的内容而变化。

　　2）inline元素设置width,height属性无效。

　　3）inline元素的margin和padding属性，水平方向的padding-left, padding-right, margin-left, margin-right都产生边距效果；但竖直方向的padding-top, padding-bottom, margin-top, margin-bottom不会产生边距效果。

display:inline-block

　　简单来说就是将对象呈现为inline对象，但是对象的内容作为block对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个link（a元素）inline-block属性值，使其既具有block的宽度高度特性又具有inline的同行特性。
对行内元素设置margin-top 和margin-bottom是否起作用


三十二、 请解释一下 relative、fixed、absolute 和 static 元素的区别

三十三、讲述你对reflow和repaint的理解
repaint就是重绘，reflow就是回流。
repaint主要是针对某一个DOM元素进行的重绘，reflow则是回流，针对整个页面的重排.
在性能优先的前提下，性能消耗回流（reflow）大于重绘（repaint）
repaint的触发:
不涉及dom元素的排版问题为repaint,例如元素的color,text-align改变，a：hover也会造成重绘，伪类引起的颜色等变化不会导致页面的回流，仅仅会触发重绘
reflow的触发：
1、width、height、border、margin、padding的修改
2、通过hover造成元素表现的改动，如display:none会导致回流
3、font类style 的修改。
4、background的修改，现在经过浏览器厂家的优化，部分background的修改只会触发repaint

三十四、Gulp 和 browserify / webpack 
Gulp / Grunt 是一种工具，能够优化前端工作流程。
比如自动刷新页面、combo、压缩css、js、编译less等等
browserify / webpack ：模块化解决方案 
那还要说到 seajs / requirejs 。
这四个都是JS模块化的方案。其中seajs / require 是一种类型，
browserify / webpack 是另一种类型
seajs / require : 是一种在线"编译" 模块的方案，相当于在页面上加载一个 CMD/AMD 解释器。这样浏览器就认识了 define、exports、module 这些东西。也就实现了模块化
browserify / webpack : 是一个预编译模块的方案，相比于上面 ，这个方案更加智能。没用过browserify，这里以webpack为例。首先，它是预编译的，不需要在浏览器中加载解释器。另外，你在本地直接写JS，不管是 AMD / CMD / ES6 风格的模块化，它都能认识，并且编译成浏览器认识的JS。

Gulp侧重于前端开发的 整个过程 的控制管理（像是流水线），我们可以通过给gulp配置不通的task（通过Gulp中的gulp.task()方法配置，比如启动server、sass/less预编译、文件的合并压缩等等）来让gulp实现不同的功能，从而构建整个前端开发流程

Webpack有人也称之为 模块打包机 ，由此也可以看出Webpack更侧重于模块打包，当然我们可以把开发中的所有资源（图片、js文件、css文件等）都可以看成模块，最初Webpack本身就是为前端JS代码打包而设计的，后来被扩展到其他资源的打包处理
三十五、CommonJS AMD CMD UMD
1，  CommonJs 是服务器端模块的规范，Node.js采用了这个规范。

	根据CommonJS规范，一个单独的文件就是一个模块。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象

2，AMD 是 RequireJS 在推广过程中对模块定义的规范化产出
3，CMD是SeaJS 在推广过程中对模块定义的规范化产出
	CMD和AMD的区别有以下几点：
	1.对于依赖的模块AMD是提前执行，CMD是延迟执行。
	不过RequireJS从2.0开始，也改成可以延迟执行（根据写法不同，处理方式不通过）。
	2.CMD推崇依赖就近，AMD推崇依赖前置。

4，UMD是AMD和CommonJS的一个糅合。AMD是浏览器优先，异步加载；CommonJS是服务器优先，同步加载。


三十七：BFC
Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，
并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。
具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。

触发 BFC：
只要元素满足下面任一条件即可触发 BFC 特性：

body 根元素
浮动元素：float 除 none 以外的值
绝对定位元素：position (absolute、fixed)
display 为 inline-block、table-cells、flex
overflow 除了 visible 以外的值 (hidden、auto、scroll)
作用：
1、同一个 BFC 下外边距会发生折叠
2、BFC 可以包含浮动的元素（清除浮动）
3、BFC 可以阻止元素被浮动元素覆盖

VUE面试题
Vue.js特点
简洁：页面由HTML模板+Json数据+Vue实例组成
数据驱动：自动计算属性和追踪依赖的模板表达式
组件化：用可复用、解耦的组件来构造页面
轻量：代码量小，不依赖其他库
快速：精确有效批量DOM更新
模板友好：可通过npm，bower等多种方式安装，很容易融入

1、v-if与v-show的区别
2、Vue.js常用指令
3、过滤器 
	过滤器本质上是一个函数，这个函数会接收一个值，将其处理并返回。
	过滤器在指令中由一个管道符 (|) 标记，并可以跟随一个或多个参数
4、vue组件之间如何通讯
	父传子方法：
		父传子方法（一） 属性传递 props
		父传子方法（二） 广播事件传递 vm.$broadcast
	子组件传父组件：
		自定义事件：子传父方法 派遣事件传递 vm.$dispatch
	兄弟组件互传：
		父组件代理传递 子(vm.dispatch ）父 ( vm.broadcast )子 事件方法传递
子组件
	
5、表单如何双向数据绑定  v-model

6、Vue的双向数据绑定原理是什么？

答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，
通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。

7、什么是MVVM？
MVVM是Model-View-ViewModel的缩写。MVVM是一种设计思想。Model 层代表数据模型，
也可以在Model中定义数据修改和操作的业务逻辑；View 代表UI 组件，它负责将数据模型转化成UI 展现出来，
ViewModel 是一个同步View 和 Model的对象（桥梁）。


8、请列举出3个Vue中常用的生命周期钩子函数 （见博客）
created: 实例已经创建完成之后调用,在这一步,实例已经完成数据观测, 属性和方法的运算, watch/event事件回调. 
		然而, 挂载阶段还没有开始, $el属性目前还不可见
mounted: el被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。
		如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。
activated: keep-alive组件激活时调用

十八、vue-router有哪几种导航钩子？（见博客）

三种：
一种是全局导航钩子
全局导航钩子主要有两种钩子：前置守卫、后置钩子，
前置钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。
后置钩子：router.beforeEach(to,from)，作用：不同于前置守卫，后置钩子并没有 next 函数，也不会改变导航本身

第二种：组件内的钩子；即单个路由独享的导航钩子，它是在路由配置上直接进行定义的  beforeEnter: (to, from ,next) => {// do someting }
第三种：单独路由独享组件（组件内的导航钩子）
组件内的导航钩子主要有这三种：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave。他们是直接在路由组件内部直接进行定义的

1.什么是vue生命周期？
答： Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、销毁等一系列过程，我们称这是Vue的生命周期。
通俗说就是Vue实例从创建到销毁的过程，就是生命周期

十九、生命周期相关面试题

总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。

创建前/后：
	在beforeCreate阶段，vue实例的挂载元素el和数据对象data都为undefined，还未初始化。
	在created阶段，vue实例的数据对象data有了，el还没有。
载入前/后：
	在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。
	在mounted阶段，vue实例挂载完成，data.message成功渲染。
	DOM 渲染在 mounted 中就已经完成了
更新前/后：
	当data变化时，会触发beforeUpdate和updated方法。

销毁前/后：
	在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在


二十、赋值、浅拷贝、深拷贝

1、赋值：传递对象的引用而已,原始列表name改变，被赋值的n也会做相同的改变
2、浅拷贝：拷贝父对象，不会拷贝对象的内部的子对象。即拷贝列表name里面的一级元素的内存地址，不拷贝name里的小列表里的元素的内存地址。
3、深拷贝：copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。
即name2不仅拷贝了name中一级元素（1，2，3，["alex","rain"]）的的内存地址，也拷贝了嵌套列表，["alex","rain"]里面的"alex"和"rain"的内存地址。

vue计算属性computed，watch,methods:

computed于data同级别
语法同methods一样
计算属性的名字 不能跟 data 或 methods 中的名字重复
完全依赖于函数体中出现的属性名，只在最初加载时和其中属性名改变时运行，并不是像methods中的函数只要页面更新就运行一次
不能传参
异步的无法处理
为了提高性能而存在
区别
computed是基于它的依赖进行缓存的。computed只有在它的相关依赖发生变化才会重新计算求值；
watch和computed: 
首先它们都是以Vue的依赖追踪机制为基础的，它们的共同点是：都是希望在依赖数据发生改变的时候，被依赖的数据根据预先定义好的函数，发生“自动”的变化。 
但watch和computed也有明显不同的地方： 
watch和computed各自处理的数据关系场景不同 
(1).watch擅长处理的场景：一个数据影响多个数据 
(2).computed擅长处理的场景：一个数据受多个数据影响


JavaScript中in操作符(for..in)、Object.keys()和Object.getOwnPropertyNames()的区别
https://www.cnblogs.com/goloving/p/7680572.html
1、for..in循环（实例+原型中的可枚举属性）
使用for..in循环时，返回的是所有能够通过对象访问的、可枚举的属性，既包括存在于实例中的属性，也包括存在于原型中的实例。这里需要注意的是使用for-in返回的属性因各个浏览器厂商遵循的标准不一致导致对象属性遍历的顺序有可能不是当初构建时的顺序。（实例+原型中的可枚举属性）
2、Object.keys()  （对象中自身可枚举的属性，不包过原型中的属性）
Object.keys()用于获取对象自身所有的可枚举的属性值，但不包括原型中的属性，然后返回一个由属性名组成的数组。注意它同for..in一样不能保证属性按对象原来的顺序输出
注意在 ES5 环境，如果传入的参数不是一个对象，而是一个字符串，那么它会报 TypeError。在 ES6 环境，如果传入的是一个非对象参数，内部会对参数作一次强制对象转换，如果转换不成功会抛出 TypeError。

3、Object.getOwnPropertyNames() （对象自身所有属性，包过不可枚举属性，不包括原型链上的属性）
　　Object.getOwnPropertyNames()方法返回对象的所有自身属性的属性名（包括不可枚举的属性）组成的数组，但不会获取原型链上的属性。


五十、setState异步、同步与进阶
合成事件：react为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件，像在jsx中常见的onClick、onChange这些都是合成事件
1、setState在合成事件和钩子函数（生命周期函数）中是“异步”的，在原生事件和setTimeout中是同步的。
2、setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是在合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和
	钩子函数中没法立马拿到更新后的值，形成所谓的“异步”。当然可以通过第二个参数setState(partialState, callback)中的callback拿到更新后的结果。
3、setState 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，
	在“异步”中如果对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，
	取最后一次的执行，如果是同时 setState 多个不同的值，在更新时会对其进行合并批量更新。	

web安全问题
XSS的危害：
通过 document.cookie 盗取 cookie中的信息

使用 js或 css破坏页面正常的结构与样式

流量劫持（通过访问某段具有 window.location.href 定位到其他页面）

dos攻击：利用合理的客户端请求来占用过多的服务器资源，从而使合法用户无法得到服务器响应。并且通过携带过程的 cookie信息可以使服务端返回400开头的状态码，从而拒绝合理的请求服务。

利用 iframe、frame、XMLHttpRequest或上述 Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作，并且攻击者还可以利用 iframe，frame进一步的进行 CSRF 攻击。

控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力

XSS 攻击的防御
XSS防御的总体思路是：对输入(和URL参数)进行过滤，对输出进行编码
HttpOnly设置 
X-Frame-Options 响应头 配置
X-Frame-Options 三个值：DENY，SAMEORIGIN，ALLOW-FROM 

escape urlencodeComponent urlencode 区别
js对文字进行编码涉及3个函数：escape,encodeURI,encodeURIComponent，相应3个解码函数：unescape,decodeURI,decodeURIComponent 
1、escape不编码字符有69个：*，+，-，.，/，@，_，0-9，a-z，A-Z 
2、encodeURI不编码字符有82个：!，#，$，&，'，(，)，*，+，,，-，.，/，:，;，=，?，@，_，~，0-9，a-z，A-Z 
3、encodeURIComponent不编码字符有71个：!， '，(，)，*，-，.，_，~，0-9，a-z，A-Z 
什么时候适合用什么方法? 
escape() 不会加密: @*/+ ，+ 在服务器端会被解析为空格以及在表单forms区域中的spaces.
基于这样的缩减方式,你应该尽可能的避免使用这种方法,二选一的话,最好的经常使用 encodeURIComponent().
escape()不能直接用于URL编码，它的真正作用是返回一个字符的Unicode编码值
escape()不对“+”编码，网页在提交表单的时候，如果有空格，则会被转化为+字符。服务器处理数据的时候，会把+号处理成空格


使用encodeURI()  比 escape() 稍专业化,它是针对URIs编码的 .一个做为querystring的反面, 
属于URL的一个部分.使用这种方法是当你需要将一个字符串转换为URIs资源标识以及需要某些字符保持非encode状态.请记住, 这个' 字符是不会进行编码的,因为它本身就包括在URIs里. 
encodeURI()不会加密: !@#$&*()=:/;?+' 
encodeURIComponent() 方法用在大多数cases中,当你需要对一个单独URIs部件进行编码,这种方法可以加密某些特殊用于的URIs的字符,因此大部分部件可以包含在里面. 记住, ' 字符本身就包括在URIs里,所以不会此方法不会对其进行编码. 
encodeURIComponent() 不会加密: !*()'


TCP三次握手四次挥手详解
TCP三次握手
所谓三次握手(Three-way Handshake)，是指建立一个TCP连接时，需要客户端和服务器总共发送3个包
三次握手的目的是连接服务器指定端口，建立TCP连接,并同步连接双方的序列号和确认号并交换 TCP 窗口大小信息.在socket编程中，客户端执行connect()时。将触发三次握手
第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。

第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；

第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手
--------------------- 

TCP 四次挥手
TCP的连接的拆除需要发送四个包，因此称为四次挥手(four-way handshake)。客户端或服务器均可主动发起挥手动作，在socket编程中，任何一方执行close()操作即可产生挥手操作
由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这个原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。

（1）客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送(报文段4)。

（2）服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1(报文段5)。和SYN一样，一个FIN将占用一个序号。

（3）服务器B关闭与客户端A的连接，发送一个FIN给客户端A(报文段6)。

（4）客户端A发回ACK报文确认，并将确认序号设置为收到序号加1(报文段7)。


React Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性
1、Hook允许您在不更改组件层次结构的情况下重用有状态逻辑。 这样可以轻松地在许多组件之间或与社区共享Hook
2、Hooks允许根据相关的部分（例如设置订阅或获取数据）将一个组件拆分为较小的函数， 而不是基于生命周期方法强制拆分
3、Hooks允许你在没有类的情况下使用更多React的功能。 从概念上讲，React组件一直更接近功能(function)。 Hooks拥抱功能，但不会牺牲React的实践精神

重点学习：
1、React： Filber 高阶组件（作用和用法），Hooks, 新的生命周期
2、数组去重
3、Promise的用法以及实现原理
4、移动端适配解决方案
5、JS的Event Loop
6、Tcp 三次握手和四次挥手
7、函数柯里化

	